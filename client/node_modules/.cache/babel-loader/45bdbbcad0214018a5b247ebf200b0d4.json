{"ast":null,"code":"import React, { Component } from 'react';\nimport validator from 'validator';\n\nclass validate {\n  error(msg) {\n    return {\n      error: true,\n      msg: msg\n    };\n  }\n\n  valid() {\n    return {\n      error: false,\n      msg: \"\"\n    };\n  }\n\n  validateName(name) {\n    validate.validators.presence.message = \"is required\";\n    let result = validate({\n      name: name\n    }, {\n      input: {\n        presence: {\n          allowEmpty: false\n        }\n      }\n    });\n    return result;\n  }\n\n  validateEmail(email) {\n    let constraints = {\n      from: {\n        email: {\n          message: \"Invalid Email\"\n        }\n      }\n    };\n    let result = validator({\n      from: email\n    }, constraints);\n    return result;\n  }\n\n  validatePassword(password) {\n    let regex = '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$';\n\n    if (regex.test(password) === false) {\n      return this.error(\"Password does not meet criteria\");\n    } else {\n      return this.valid();\n    }\n  }\n\n  validateConfirmPassword(password, confirmPassword) {\n    if (password != confirmPassword) {\n      return this.error(\"Passwords do not match\");\n    } else {\n      return this.valid();\n    }\n  }\n\n  validateForm(field) {\n    switch (fieldName, field) {\n      case \"firstName\":\n        this.validateName(field);\n        break;\n\n      case \"lastName\":\n        this.validateName(field);\n        break;\n\n      case \"email\":\n        this.validateEmail(field);\n        break;\n\n      case \"password\":\n        this.validatePassword(field);\n        break;\n\n      case \"confirmPassword\":\n        this.validateConfirmPassword(field);\n        break;\n\n      default:\n        return valid();\n    }\n  }\n\n}\n\nexport default validate;","map":{"version":3,"sources":["/home/deion/ttp-stockportfolio/client/src/component/validate.js"],"names":["React","Component","validator","validate","error","msg","valid","validateName","name","validators","presence","message","result","input","allowEmpty","validateEmail","email","constraints","from","validatePassword","password","regex","test","validateConfirmPassword","confirmPassword","validateForm","field","fieldName"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,WAAtB;;AAEA,MAAMC,QAAN,CAAc;AAEVC,EAAAA,KAAK,CAACC,GAAD,EAAK;AACN,WAAO;AACHD,MAAAA,KAAK,EAAC,IADH;AAEHC,MAAAA,GAAG,EAACA;AAFD,KAAP;AAIH;;AAEDC,EAAAA,KAAK,GAAE;AACH,WAAO;AACHF,MAAAA,KAAK,EAAC,KADH;AAEHC,MAAAA,GAAG,EAAC;AAFD,KAAP;AAIH;;AAEDE,EAAAA,YAAY,CAACC,IAAD,EAAM;AACdL,IAAAA,QAAQ,CAACM,UAAT,CAAoBC,QAApB,CAA6BC,OAA7B,GAAuC,aAAvC;AACA,QAAIC,MAAM,GAAGT,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAACA;AAAN,KAAD,EAAc;AAACK,MAAAA,KAAK,EAAE;AAACH,QAAAA,QAAQ,EAAE;AAACI,UAAAA,UAAU,EAAE;AAAb;AAAX;AAAR,KAAd,CAArB;AACA,WAAOF,MAAP;AACH;;AAEDG,EAAAA,aAAa,CAACC,KAAD,EAAO;AAChB,QAAIC,WAAW,GAAG;AACdC,MAAAA,IAAI,EAAE;AACJF,QAAAA,KAAK,EAAE;AACLL,UAAAA,OAAO,EAAE;AADJ;AADH;AADQ,KAAlB;AAQA,QAAIC,MAAM,GAACV,SAAS,CAAC;AAACgB,MAAAA,IAAI,EAAEF;AAAP,KAAD,EAAgBC,WAAhB,CAApB;AACA,WAAOL,MAAP;AACH;;AAEDO,EAAAA,gBAAgB,CAACC,QAAD,EAAU;AACtB,QAAIC,KAAK,GAAC,gEAAV;;AACA,QAAGA,KAAK,CAACC,IAAN,CAAWF,QAAX,MAAuB,KAA1B,EAAgC;AAC5B,aAAO,KAAKhB,KAAL,CAAW,iCAAX,CAAP;AACH,KAFD,MAGI;AACA,aAAO,KAAKE,KAAL,EAAP;AACH;AACJ;;AAEDiB,EAAAA,uBAAuB,CAACH,QAAD,EAAUI,eAAV,EAA0B;AAC7C,QAAGJ,QAAQ,IAAEI,eAAb,EAA6B;AACzB,aAAO,KAAKpB,KAAL,CAAW,wBAAX,CAAP;AACH,KAFD,MAGI;AACA,aAAO,KAAKE,KAAL,EAAP;AACH;AACJ;;AAEDmB,EAAAA,YAAY,CAACC,KAAD,EAAO;AACf,YAAOC,SAAS,EAACD,KAAjB;AACI,WAAK,WAAL;AACI,aAAKnB,YAAL,CAAkBmB,KAAlB;AACA;;AACJ,WAAK,UAAL;AACI,aAAKnB,YAAL,CAAkBmB,KAAlB;AACA;;AACJ,WAAK,OAAL;AACI,aAAKX,aAAL,CAAmBW,KAAnB;AACA;;AACJ,WAAK,UAAL;AACI,aAAKP,gBAAL,CAAsBO,KAAtB;AACA;;AACJ,WAAK,iBAAL;AACI,aAAKH,uBAAL,CAA6BG,KAA7B;AACA;;AACJ;AACI,eAAOpB,KAAK,EAAZ;AAjBR;AAmBH;;AA1ES;;AA6Ed,eAAeH,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport validator from 'validator';\n\nclass validate{\n\n    error(msg){\n        return {\n            error:true,\n            msg:msg\n        }\n    }\n\n    valid(){\n        return {\n            error:false,\n            msg:\"\"\n        }\n    }\n\n    validateName(name){\n        validate.validators.presence.message = \"is required\";\n        let result = validate({name:name}, {input: {presence: {allowEmpty: false}}});\n        return result;\n    }\n\n    validateEmail(email){\n        let constraints = {\n            from: {\n              email: {\n                message: \"Invalid Email\"\n              }\n            }\n        };\n\n        let result=validator({from: email}, constraints)\n        return result;\n    }\n\n    validatePassword(password){\n        let regex='^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$'\n        if(regex.test(password)===false){\n            return this.error(\"Password does not meet criteria\")\n        }\n        else{\n            return this.valid()\n        }\n    }\n\n    validateConfirmPassword(password,confirmPassword){\n        if(password!=confirmPassword){\n            return this.error(\"Passwords do not match\")\n        }\n        else{\n            return this.valid()\n        }\n    }\n\n    validateForm(field){  \n        switch(fieldName,field) {\n            case \"firstName\":\n                this.validateName(field)\n                break;\n            case \"lastName\":\n                this.validateName(field)\n                break;\n            case \"email\":\n                this.validateEmail(field)\n                break;\n            case \"password\":\n                this.validatePassword(field)\n                break;\n            case \"confirmPassword\":\n                this.validateConfirmPassword(field)\n                break;\n            default:\n                return valid()\n        }\n    }\n}\n\nexport default validate;\n"]},"metadata":{},"sourceType":"module"}