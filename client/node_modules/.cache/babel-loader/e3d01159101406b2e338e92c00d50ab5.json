{"ast":null,"code":"import React, { Component } from 'react';\nimport validate from 'validator';\n\nfunction error(msg) {\n  return {\n    error: true,\n    msg: msg\n  };\n}\n\nfunction valid() {\n  return {\n    error: false,\n    msg: \"\"\n  };\n}\n\nfunction validateName(name) {\n  validate.validators.presence.message = \"is required\";\n  let result = validate({\n    name: name\n  }, {\n    input: {\n      presence: {\n        allowEmpty: false\n      }\n    }\n  });\n  return result;\n}\n\nfunction validateEmail(email) {\n  let constraints = {\n    from: {\n      email: {\n        message: \"Invalid Email\"\n      }\n    }\n  };\n  let result = validate({\n    from: email\n  }, constraints);\n  return result;\n}\n\nfunction validatePassword(password) {\n  let regex = '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$';\n\n  if (regex.test(password) === false) {\n    return error(\"Password does not meet criteria\");\n  } else {\n    return valid();\n  }\n}\n\nfunction validateConfirmPassword(password, confirmPassword) {\n  if (password != confirmPassword) {\n    console.log('password function');\n    return error(\"Passwords do not match\");\n  } else {\n    return valid();\n  }\n}\n\nfunction validateForm(fieldName, field) {\n  switch (fieldName) {\n    case \"firstName\":\n      this.validateName(field);\n      break;\n\n    case \"lastName\":\n      this.validateName(field);\n      break;\n\n    case \"email\":\n      this.validateEmail(field);\n      break;\n\n    case \"password\":\n      this.validatePassword(field);\n      break;\n\n    case \"confirmPassword\":\n      this.validateConfirmPassword(field);\n      break;\n\n    default:\n      return valid();\n  }\n}","map":{"version":3,"sources":["/home/deion/ttp-stockportfolio/client/src/component/validate.js"],"names":["React","Component","validate","error","msg","valid","validateName","name","validators","presence","message","result","input","allowEmpty","validateEmail","email","constraints","from","validatePassword","password","regex","test","validateConfirmPassword","confirmPassword","console","log","validateForm","fieldName","field"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAGI,SAASC,KAAT,CAAeC,GAAf,EAAmB;AACf,SAAO;AACHD,IAAAA,KAAK,EAAC,IADH;AAEHC,IAAAA,GAAG,EAACA;AAFD,GAAP;AAIH;;AAED,SAASC,KAAT,GAAgB;AACZ,SAAO;AACHF,IAAAA,KAAK,EAAC,KADH;AAEHC,IAAAA,GAAG,EAAC;AAFD,GAAP;AAIH;;AAED,SAASE,YAAT,CAAsBC,IAAtB,EAA2B;AACvBL,EAAAA,QAAQ,CAACM,UAAT,CAAoBC,QAApB,CAA6BC,OAA7B,GAAuC,aAAvC;AACA,MAAIC,MAAM,GAAGT,QAAQ,CAAC;AAACK,IAAAA,IAAI,EAACA;AAAN,GAAD,EAAc;AAACK,IAAAA,KAAK,EAAE;AAACH,MAAAA,QAAQ,EAAE;AAACI,QAAAA,UAAU,EAAE;AAAb;AAAX;AAAR,GAAd,CAArB;AACA,SAAOF,MAAP;AACH;;AAED,SAASG,aAAT,CAAuBC,KAAvB,EAA6B;AACzB,MAAIC,WAAW,GAAG;AACdC,IAAAA,IAAI,EAAE;AACJF,MAAAA,KAAK,EAAE;AACLL,QAAAA,OAAO,EAAE;AADJ;AADH;AADQ,GAAlB;AAQA,MAAIC,MAAM,GAACT,QAAQ,CAAC;AAACe,IAAAA,IAAI,EAAEF;AAAP,GAAD,EAAgBC,WAAhB,CAAnB;AACA,SAAOL,MAAP;AACH;;AAED,SAASO,gBAAT,CAA0BC,QAA1B,EAAmC;AAC/B,MAAIC,KAAK,GAAC,gEAAV;;AACA,MAAGA,KAAK,CAACC,IAAN,CAAWF,QAAX,MAAuB,KAA1B,EAAgC;AAC5B,WAAOhB,KAAK,CAAC,iCAAD,CAAZ;AACH,GAFD,MAGI;AACA,WAAOE,KAAK,EAAZ;AACH;AACJ;;AAED,SAASiB,uBAAT,CAAiCH,QAAjC,EAA0CI,eAA1C,EAA0D;AACtD,MAAGJ,QAAQ,IAAEI,eAAb,EAA6B;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,WAAOtB,KAAK,CAAC,wBAAD,CAAZ;AACH,GAHD,MAII;AACA,WAAOE,KAAK,EAAZ;AACH;AACJ;;AAED,SAASqB,YAAT,CAAsBC,SAAtB,EAAgCC,KAAhC,EAAsC;AAClC,UAAOD,SAAP;AACI,SAAK,WAAL;AACI,WAAKrB,YAAL,CAAkBsB,KAAlB;AACA;;AACJ,SAAK,UAAL;AACI,WAAKtB,YAAL,CAAkBsB,KAAlB;AACA;;AACJ,SAAK,OAAL;AACI,WAAKd,aAAL,CAAmBc,KAAnB;AACA;;AACJ,SAAK,UAAL;AACI,WAAKV,gBAAL,CAAsBU,KAAtB;AACA;;AACJ,SAAK,iBAAL;AACI,WAAKN,uBAAL,CAA6BM,KAA7B;AACA;;AACJ;AACI,aAAOvB,KAAK,EAAZ;AAjBR;AAmBH","sourcesContent":["import React, { Component } from 'react';\nimport validate from 'validator';\n\n\n    function error(msg){\n        return {\n            error:true,\n            msg:msg\n        }\n    }\n\n    function valid(){\n        return {\n            error:false,\n            msg:\"\"\n        }\n    }\n\n    function validateName(name){\n        validate.validators.presence.message = \"is required\";\n        let result = validate({name:name}, {input: {presence: {allowEmpty: false}}});\n        return result;\n    }\n\n    function validateEmail(email){\n        let constraints = {\n            from: {\n              email: {\n                message: \"Invalid Email\"\n              }\n            }\n        };\n\n        let result=validate({from: email}, constraints)\n        return result;\n    }\n\n    function validatePassword(password){\n        let regex='^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$'\n        if(regex.test(password)===false){\n            return error(\"Password does not meet criteria\")\n        }\n        else{\n            return valid()\n        }\n    }\n\n    function validateConfirmPassword(password,confirmPassword){\n        if(password!=confirmPassword){\n            console.log('password function')\n            return error(\"Passwords do not match\")\n        }\n        else{\n            return valid()\n        }\n    }\n\n    function validateForm(fieldName,field){  \n        switch(fieldName) {\n            case \"firstName\":\n                this.validateName(field)\n                break;\n            case \"lastName\":\n                this.validateName(field)\n                break;\n            case \"email\":\n                this.validateEmail(field)\n                break;\n            case \"password\":\n                this.validatePassword(field)\n                break;\n            case \"confirmPassword\":\n                this.validateConfirmPassword(field)\n                break;\n            default:\n                return valid()\n        }\n    }\n"]},"metadata":{},"sourceType":"module"}