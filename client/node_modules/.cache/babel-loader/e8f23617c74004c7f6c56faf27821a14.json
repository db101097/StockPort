{"ast":null,"code":"import React, { Component } from 'react';\nimport validate from 'validator';\n\nfunction error(msg) {\n  return {\n    error: true,\n    msg: msg\n  };\n}\n\nfunction valid() {\n  return {\n    error: false,\n    msg: \"\"\n  };\n}\n\nfunction validateName(name) {\n  if (typeof name === \"string\" && name.length > 0) {\n    return valid();\n  } else {\n    return error('Name is invalid');\n  }\n}\n\nfunction validateEmail(email) {\n  let re = '/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/';\n\n  if (re.test(email) === false) {\n    return error('Email is invalid');\n  } else {\n    return valid();\n  }\n}\n\nfunction validatePassword(password) {\n  let regex = '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$';\n\n  if (regex.test(password) === false) {\n    return error(\"Password does not meet criteria\");\n  } else {\n    return valid();\n  }\n}\n\nfunction validateConfirmPassword(password, confirmPassword) {\n  if (password !== confirmPassword) {\n    console.log('password function');\n    return error(\"Passwords do not match\");\n  } else {\n    return valid();\n  }\n}\n\nexport function validateForm(fieldName, field) {\n  switch (fieldName) {\n    case \"firstName\":\n      validateName(field);\n      break;\n\n    case \"lastName\":\n      validateName(field);\n      break;\n\n    case \"email\":\n      validateEmail(field);\n      break;\n\n    case \"password\":\n      validatePassword(field);\n      break;\n\n    case \"confirmPassword\":\n      validateConfirmPassword(field);\n      break;\n\n    default:\n      return valid();\n  }\n}","map":{"version":3,"sources":["/home/deion/ttp-stockportfolio/client/src/component/validate.js"],"names":["React","Component","validate","error","msg","valid","validateName","name","length","validateEmail","email","re","test","validatePassword","password","regex","validateConfirmPassword","confirmPassword","console","log","validateForm","fieldName","field"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAGI,SAASC,KAAT,CAAeC,GAAf,EAAmB;AACf,SAAO;AACHD,IAAAA,KAAK,EAAC,IADH;AAEHC,IAAAA,GAAG,EAACA;AAFD,GAAP;AAIH;;AAED,SAASC,KAAT,GAAgB;AACZ,SAAO;AACHF,IAAAA,KAAK,EAAC,KADH;AAEHC,IAAAA,GAAG,EAAC;AAFD,GAAP;AAIH;;AAED,SAASE,YAAT,CAAsBC,IAAtB,EAA2B;AACvB,MAAG,OAAOA,IAAP,KAAe,QAAf,IAAyBA,IAAI,CAACC,MAAL,GAAY,CAAxC,EAA0C;AACtC,WAAOH,KAAK,EAAZ;AACH,GAFD,MAGI;AACA,WAAOF,KAAK,CAAC,iBAAD,CAAZ;AACH;AACJ;;AAED,SAASM,aAAT,CAAuBC,KAAvB,EAA6B;AACzB,MAAIC,EAAE,GAAG,6JAAT;;AACA,MAAGA,EAAE,CAACC,IAAH,CAAQF,KAAR,MAAiB,KAApB,EAA0B;AACtB,WAAOP,KAAK,CAAC,kBAAD,CAAZ;AACH,GAFD,MAGI;AACA,WAAOE,KAAK,EAAZ;AACH;AACJ;;AAED,SAASQ,gBAAT,CAA0BC,QAA1B,EAAmC;AAC/B,MAAIC,KAAK,GAAC,gEAAV;;AACA,MAAGA,KAAK,CAACH,IAAN,CAAWE,QAAX,MAAuB,KAA1B,EAAgC;AAC5B,WAAOX,KAAK,CAAC,iCAAD,CAAZ;AACH,GAFD,MAGI;AACA,WAAOE,KAAK,EAAZ;AACH;AACJ;;AAED,SAASW,uBAAT,CAAiCF,QAAjC,EAA0CG,eAA1C,EAA0D;AACtD,MAAGH,QAAQ,KAAGG,eAAd,EAA8B;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,WAAOhB,KAAK,CAAC,wBAAD,CAAZ;AACH,GAHD,MAII;AACA,WAAOE,KAAK,EAAZ;AACH;AACJ;;AAED,OAAO,SAASe,YAAT,CAAuBC,SAAvB,EAAiCC,KAAjC,EAAwC;AAC3C,UAAOD,SAAP;AACI,SAAK,WAAL;AACIf,MAAAA,YAAY,CAACgB,KAAD,CAAZ;AACA;;AACJ,SAAK,UAAL;AACIhB,MAAAA,YAAY,CAACgB,KAAD,CAAZ;AACA;;AACJ,SAAK,OAAL;AACIb,MAAAA,aAAa,CAACa,KAAD,CAAb;AACA;;AACJ,SAAK,UAAL;AACIT,MAAAA,gBAAgB,CAACS,KAAD,CAAhB;AACA;;AACJ,SAAK,iBAAL;AACIN,MAAAA,uBAAuB,CAACM,KAAD,CAAvB;AACA;;AACJ;AACI,aAAOjB,KAAK,EAAZ;AAjBR;AAmBH","sourcesContent":["import React, { Component } from 'react';\nimport validate from 'validator';\n\n\n    function error(msg){\n        return {\n            error:true,\n            msg:msg\n        }\n    }\n\n    function valid(){\n        return {\n            error:false,\n            msg:\"\"\n        }\n    }\n\n    function validateName(name){\n        if(typeof(name)===\"string\"&&name.length>0){\n            return valid()\n        }\n        else{\n            return error('Name is invalid')\n        }\n    }\n\n    function validateEmail(email){\n        let re = '/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/'\n        if(re.test(email)===false){\n            return error('Email is invalid')\n        }\n        else{\n            return valid()\n        }\n    }\n\n    function validatePassword(password){\n        let regex='^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$'\n        if(regex.test(password)===false){\n            return error(\"Password does not meet criteria\")\n        }\n        else{\n            return valid()\n        }\n    }\n\n    function validateConfirmPassword(password,confirmPassword){\n        if(password!==confirmPassword){\n            console.log('password function')\n            return error(\"Passwords do not match\")\n        }\n        else{\n            return valid()\n        }\n    }\n\n    export function validateForm (fieldName,field) {  \n        switch(fieldName) {\n            case \"firstName\":\n                validateName(field)\n                break;\n            case \"lastName\":\n                validateName(field)\n                break;\n            case \"email\":\n                validateEmail(field)\n                break;\n            case \"password\":\n                validatePassword(field)\n                break;\n            case \"confirmPassword\":\n                validateConfirmPassword(field)\n                break;\n            default:\n                return valid()\n        }\n    }\n"]},"metadata":{},"sourceType":"module"}